<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Settings</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css">
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
  <style>
    :root {
      --bg-body: #121212;
      --bg-main: #0a0f1a;
      --bg-container: #1e1e1e;
      --bg-input: #2c2c2c;
      --border-input: #333;
      --text-primary: #e0e0e0;
      --text-label: #bbbbbb;
      --text-secondary: #999;
      --text-white: #fff;
      --accent: #5a55ca;
      --accent-hover: #4842b6;
      --alert-color: #e57373;
      --success-color: #4ade80;
      --accent-glow: rgba(90, 85, 202, 0.3);
      --shadow-sm: 0 2px 8px rgba(0, 0, 0, 0.3);
      --shadow-md: 0 6px 20px rgba(0, 0, 0, 0.4);
      --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      scroll-behavior: smooth;
    }

    body {
      font-family: 'Poppins', -apple-system, BlinkMacSystemFont, sans-serif;
      background: var(--bg-body);
      color: var(--text-primary);
      min-height: 100vh;
      overflow-x: hidden;
      position: relative;
    }

    /* Particle Background */
    #particles {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: -1;
      opacity: 0.12;
    }

    main {
      background: linear-gradient(135deg, var(--bg-main) 60%, rgba(90, 85, 202, 0.1));
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
      padding: 20px 16px;
    }

    .container {
      width: 100%;
      max-width: 600px;
      background: var(--bg-container);
      backdrop-filter: blur(10px);
      padding: 32px;
      border-radius: 16px;
      box-shadow: var(--shadow-md);
      border: 1px solid var(--accent-glow);
      animation: fadeInUp 0.6s ease-out;
      margin: auto;
      margin-top: 50px;
      position: relative;
      overflow: hidden;
    }

    .container:hover {
      box-shadow: 0 8px 32px var(--accent-glow);
    }

    .container::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 4px;
      background: linear-gradient(90deg, var(--accent), var(--accent-hover));
      opacity: 0.8;
    }

    h1 {
      text-align: center;
      color: var(--text-white);
      font-size: 1.75rem;
      font-weight: 600;
      margin-bottom: 24px;
      background: linear-gradient(90deg, var(--text-white), var(--accent));
      -webkit-text-fill-color: transparent;
      position: relative;
    }

    h1::after {
      content: '';
      display: block;
      width: 60px;
      height: 2px;
      background: var(--accent);
      margin: 8px auto;
      border-radius: 2px;
    }

    .settings-form {
      display: flex;
      flex-direction: column;
      gap: 20px;
    }

    .section {
      border-bottom: 1px solid var(--border-input);
      padding-bottom: 20px;
      margin-bottom: 20px;
    }

    .section:last-child {
      border-bottom: none;
      padding-bottom: 0;
      margin-bottom: 0;
    }

    .section h2 {
      color: var(--text-label);
      font-size: 1.1rem;
      font-weight: 500;
      margin-bottom: 16px;
    }

    .form-group {
      margin-bottom: 16px;
    }

    .form-group label {
      display: block;
      font-weight: 500;
      color: var(--text-label);
      margin-bottom: 8px;
      font-size: 0.9rem;
      transition: var(--transition);
    }

    .form-group:hover label {
      color: var(--text-white);
      transform: translateY(-2px);
    }

    .form-group input {
      width: 100%;
      padding: 10px 14px;
      border: 1px solid var(--border-input);
      border-radius: 6px;
      background: var(--bg-input);
      color: var(--text-white);
      font-size: 0.95rem;
      font-family: 'Poppins', sans-serif;
      transition: var(--transition);
    }

    .form-group input:focus {
      border-color: var(--accent);
      box-shadow: 0 0 6px var(--accent-glow);
      outline: none;
    }

    .form-group input::placeholder {
      color: var(--text-secondary);
      opacity: 0.7;
      transition: var(--transition);
    }

    .form-group input:focus::placeholder {
      opacity: 0;
    }

    .toggle-group {
      display: flex;
      align-items: center;
      justify-content: space-between;
      margin-bottom: 16px;
    }

    .toggle-group label {
      font-size: 0.9rem;
      color: var(--text-label);
      transition: var(--transition);
    }

    .toggle {
      position: relative;
      width: 48px;
      height: 24px;
      background: var(--bg-input);
      border-radius: 24px;
      cursor: pointer;
      transition: var(--transition);
    }

    .toggle input {
      display: none;
    }

    .toggle::after {
      content: '';
      position: absolute;
      top: 2px;
      left: 2px;
      width: 20px;
      height: 20px;
      background: var(--text-white);
      border-radius: 50%;
      transition: var(--transition);
    }

    .toggle input:checked + .toggle {
      background: var(--accent);
    }

    .toggle input:checked + .toggle::after {
      left: 26px;
    }

    .theme-group {
      display: flex;
      align-items: center;
      gap: 20px;
      margin-bottom: 16px;
    }

    .theme-option {
      display: flex;
      align-items: center;
      gap: 8px;
      font-size: 0.9rem;
      color: var(--text-label);
      cursor: pointer;
      transition: var(--transition);
    }

    .theme-option input {
      display: none;
    }

    .theme-option span {
      width: 20px;
      height: 20px;
      border-radius: 50%;
      border: 2px solid var(--border-input);
      display: flex;
      align-items: center;
      justify-content: center;
      transition: var(--transition);
    }

    .theme-option input:checked + span {
      border-color: var(--accent);
      background: var(--accent);
    }

    .theme-option input:checked + span::after {
      content: '\f00c';
      font-family: 'Font Awesome 6 Free';
      font-weight: 900;
      color: var(--text-white);
      font-size: 0.7rem;
    }

    .error-message {
      color: var(--alert-color);
      font-size: 0.8rem;
      margin-top: 4px;
      display: none;
      animation: slideIn 0.3s ease;
    }

    .button-group {
      display: flex;
      gap: 12px;
      justify-content: center;
      margin-top: 20px;
    }

    .btn {
      flex: 1;
      background: linear-gradient(90deg, var(--accent), var(--accent-hover));
      color: var(--text-white);
      padding: 10px 20px;
      border: none;
      border-radius: 6px;
      font-size: 0.95rem;
      font-weight: 500;
      cursor: pointer;
      position: relative;
      overflow: hidden;
      transition: var(--transition);
    }

    .btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px var(--accent-glow);
    }

    .btn::before {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      width: 0;
      height: 0;
      background: rgba(255, 255, 255, 0.2);
      border-radius: 50%;
      transform: translate(-50%, -50%);
      transition: width 0.6s ease, height 0.6s ease;
    }

    .btn:hover::before {
      width: 200px;
      height: 200px;
    }

    .btn.cancel {
      background: var(--bg-input);
      color: var(--text-label);
    }

    .btn.cancel:hover {
      background: var(--border-input);
      color: var(--text-white);
      box-shadow: 0 4px 12px var(--shadow-sm);
    }

    .btn.danger {
      background: var(--alert-color);
    }

    .btn.danger:hover {
      background: #d32f2f;
      box-shadow: 0 4px 12px rgba(229, 115, 115, 0.3);
    }

    .btn:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none;
    }

    .toast {
      position: fixed;
      bottom: 20px;
      right: 20px;
      background: var(--success-color);
      color: var(--text-white);
      padding: 12px 24px;
      border-radius: 8px;
      box-shadow: var(--shadow-sm);
      display: none;
      font-size: 0.9rem;
      font-weight: 500;
      animation: slideIn 0.3s ease, fadeOut 0.3s ease 2.7s forwards;
      border-left: 4px solid var(--accent);
    }

    /* Animations */
    @keyframes fadeInUp {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }

    @keyframes slideIn {
      from { transform: translateX(20px); opacity: 0; }
      to { transform: translateX(0); opacity: 1; }
    }

    @keyframes fadeOut {
      to { opacity: 0; transform: translateX(20px); }
    }

    /* Responsive Design */
    @media (max-width: 768px) {
      main {
        padding: 16px 12px;
      }

      .container {
        padding: 24px;
      }

      h1 {
        font-size: 1.5rem;
      }

      .button-group {
        flex-direction: column;
        gap: 10px;
      }

      .btn {
        width: 100%;
      }
    }

    @media (max-width: 480px) {
      h1 {
        font-size: 1.25rem;
      }

      .container {
        padding: 20px;
      }

      .section h2 {
        font-size: 1rem;
      }

      .form-group label,
      .toggle-group label,
      .theme-option {
        font-size: 0.85rem;
      }

      .form-group input {
        font-size: 0.9rem;
        padding: 8px 12px;
      }

      .toast {
        bottom: 16px;
        right: 16px;
        padding: 10px 20px;
        font-size: 0.85rem;
      }
    }
  </style>
</head>
<body>
  <canvas id="particles"></canvas>
  <%- include("./partials/navbar.ejs") %>
  <main>
    <div class="container">
      <h1>Settings</h1>
      <form class="settings-form" id="settingsForm">
        <!-- Account Settings -->
        <div class="section">
          <h2>Account</h2>
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" value="<%= locals.user.email %>" placeholder="Enter new email">
            <div class="error-message" id="email-error">Please enter a valid email.</div>
          </div>
          <div class="form-group">
            <label for="password">New Password</label>
            <input type="password" id="password" name="password" placeholder="Enter new password">
            <div class="error-message" id="password-error">Password must be 8+ characters.</div>
          </div>
          <div class="form-group">
            <label for="confirm-password">Confirm Password</label>
            <input type="password" id="confirm-password" name="confirm-password" placeholder="Confirm new password">
            <div class="error-message" id="confirm-password-error">Passwords do not match.</div>
          </div>
        </div>

        <!-- Privacy Settings -->
        <div class="section">
          <h2>Privacy</h2>
          <div class="toggle-group">
            <label>Public Profile</label>
            <label class="toggle">
              <input type="checkbox" name="public-profile" checked>
              <span class="toggle"></span>
            </label>
          </div>
          <div class="toggle-group">
            <label>Share Data with Partners</label>
            <label class="toggle">
              <input type="checkbox" name="data-sharing">
              <span class="toggle"></span>
            </label>
          </div>
        </div>

        <!-- Notification Settings -->
        <div class="section">
          <h2>Notifications</h2>
          <div class="toggle-group">
            <label>Email Notifications</label>
            <label class="toggle">
              <input type="checkbox" name="email-notifications" checked>
              <span class="toggle"></span>
            </label>
          </div>
          <div class="toggle-group">
            <label>Push Notifications</label>
            <label class="toggle">
              <input type="checkbox" name="push-notifications">
              <span class="toggle"></span>
            </label>
          </div>
        </div>

        <!-- Theme Settings -->
        <div class="section">
          <h2>Theme</h2>
          <div class="theme-group">
            <label class="theme-option">
              <input type="radio" name="theme" value="dark" checked>
              <span></span> Dark
            </label>
            <label class="theme-option">
              <input type="radio" name="theme" value="light">
              <span></span> Light
            </label>
          </div>
        </div>

        <!-- Buttons -->
        <div class="button-group">
          <button type="submit" class="btn" id="save-btn" aria-label="Save Settings">Save Changes</button>
          <button type="button" class="btn cancel" onclick="window.location.href='/profile/<%= user._id %>'" aria-label="Cancel">Cancel</button>
          <button type="button" class="btn danger" id="delete-btn" aria-label="Delete Account">Delete Account</button>
        </div>
      </form>
    </div>
  </main>
  <div class="toast" id="success-toast">Settings updated successfully!</div>
  <script>
    // Particle Background
    const canvas = document.getElementById('particles');
    const ctx = canvas.getContext('2d');
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    const particles = [];
    const particleCount = 50;

    class Particle {
      constructor() {
        this.x = Math.random() * canvas.width;
        this.y = Math.random() * canvas.height;
        this.size = Math.random() * 1.8 + 0.5;
        this.speedX = Math.random() * 0.4 - 0.2;
        this.speedY = Math.random() * 0.4 - 0.2;
      }

      update() {
        this.x += this.speedX;
        this.y += this.speedY;
        if (this.size > 0.2) this.size -= 0.005;
        if (this.x < 0 || this.x > canvas.width) this.speedX *= -1;
        if (this.y < 0 || this.y > canvas.height) this.speedY *= -1;
      }

      draw() {
        ctx.fillStyle = 'rgba(90, 85, 202, 0.5)';
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
        ctx.fill();
      }
    }

    function initParticles() {
      for (let i = 0; i < particleCount; i++) {
        particles.push(new Particle());
      }
    }

    function animateParticles() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      particles.forEach((particle, i) => {
        particle.update();
        particle.draw();
        if (particle.size <= 0.2) {
          particles.splice(i, 1);
          particles.push(new Particle());
        }
      });
      requestAnimationFrame(animateParticles);
    }

    initParticles();
    animateParticles();

    window.addEventListener('resize', () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    });

    // Form Handling
    const form = document.getElementById('settingsForm');
    const emailInput = document.getElementById('email');
    const passwordInput = document.getElementById('password');
    const confirmPasswordInput = document.getElementById('confirm-password');
    const saveBtn = document.getElementById('save-btn');
    const deleteBtn = document.getElementById('delete-btn');
    const toast = document.getElementById('success-toast');
    let formChanged = false;

    form.addEventListener('submit', (event) => {
      event.preventDefault();
      let valid = true;
      document.querySelectorAll('.error-message').forEach(el => el.style.display = 'none');

      // Email Validation
      const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (emailInput.value && !emailPattern.test(emailInput.value)) {
        document.getElementById('email-error').style.display = 'block';
        valid = false;
      }

      // Password Validation
      if (passwordInput.value && passwordInput.value.length < 8) {
        document.getElementById('password-error').style.display = 'block';
        valid = false;
      }

      // Confirm Password
      if (passwordInput.value && passwordInput.value !== confirmPasswordInput.value) {
        document.getElementById('confirm-password-error').style.display = 'block';
        valid = false;
      }

      if (valid || passwordInput.value || confirmPasswordInput.value) {
        saveBtn.disabled = true;
        saveBtn.textContent = 'Saving...';
        saveBtn.style.opacity = '0.6';
        setTimeout(() => {
          toast.style.display = 'block';
          formChanged = false;
          saveBtn.disabled = false;
          saveBtn.textContent = 'Save Changes';
          saveBtn.style.opacity = '1';
        }, 1000);
        if(passwordInput.value != "" || confirmPasswordInput.value != "") {
          fetch('/settings', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            password: passwordInput.value,
          })
        });
        if(passwordInput.value && confirmPasswordInput.value) {
          setTimeout(() => {
          window.location.href = '/logout';
        }, 1000);
        }
        }
      }
    });

    // Delete Account
    deleteBtn.addEventListener('click', () => {
      if (confirm('Are you sure you want to delete your account? This cannot be undone.')) {
        // Simulate deletion
        deleteBtn.disabled = true;
        deleteBtn.textContent = 'Deleting...';
        setTimeout(() => {
          window.location.href = '/logout';
        }, 1000);
      }
    });

    // Track Changes
    const inputs = form.querySelectorAll('input');
    inputs.forEach(input => {
      input.addEventListener('change', () => {
        formChanged = true;
      });
    });

    window.addEventListener('beforeunload', (event) => {
      if (formChanged && !toast.style.display) {
        event.preventDefault();
        event.returnValue = 'You have unsaved changes. Are you sure you want to leave?';
      }
    });

    // Reset formChanged on Cancel
    document.querySelector('.btn.cancel').addEventListener('click', () => {
      formChanged = false;
    });

    // Scroll Animation
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.style.opacity = '1';
            entry.target.style.transform = 'translateY(0)';
          }
        });
      },
      { threshold: 0.1 }
    );

    const container = document.querySelector('.container');
    container.style.opacity = '0';
    container.style.transform = 'translateY(20px)';
    observer.observe(container);
  </script>
  <%- include("./partials/script.ejs") %>
</body>
</html>